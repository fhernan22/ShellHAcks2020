{"version":3,"sources":["components/StockPreview/StockPreview.component.jsx","components/StockListComponent/StockList.component.jsx","components/SearchBox/SearchBox.component.jsx","components/StockComponents/Stock.component.jsx","components/HomeComponent/HomeComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["StockPreview","name","symbol","exchange","Card","variant","className","CardContent","Typography","gutterBottom","component","CardActions","Button","size","to","StockList","filteredList","map","stock","key","SearchBox","placeholder","handleChange","type","onChange","columns","id","label","minWidth","useStyles","makeStyles","root","width","margin","container","maxHeight","Stock","match","useState","company","setCompany","chartXvalues","setchartXvalues","chartYvalues","setchartYvalues","page","setPage","classes","rowsPerPage","setRowsPerPage","useEffect","fetchStock","fetchCompanyInfo","info","API_CALL","params","fetch","then","response","json","data","auxXValues","auxYValues","date","push","rows","Name","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","align","style","TableBody","slice","row","hover","role","tabIndex","console","log","TablePagination","rowsPerPageOptions","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","value","x","y","mode","marker","color","layout","height","paper_bgcolor","plot_bgcolor","title","Home","stockList","setStockList","searchField","setSearchField","fetchAllActiveStocks","JSC","text","csv2Json","filter","toLowerCase","includes","e","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca564a5b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./StockPreview.styles.scss\";\nimport { Link } from \"react-router-dom\";\n\nfunction StockPreview({ name, symbol, exchange }) {\n  return (\n    <Card variant=\"outlined\" className=\"stock-preview\">\n      <CardContent>\n        <Typography className=\"text-color\" gutterBottom>\n          {name}\n        </Typography>\n        <Typography\n          className=\"text-color\"\n          variant=\"h5\"\n          component=\"h2\"\n        ></Typography>\n        <Typography className=\"text-color\">{symbol}</Typography>\n        <Typography className=\"text-color\" variant=\"body2\" component=\"p\">\n          {exchange}\n          <br />\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\" className=\"center text-color hover\">\n          <Link to={`/company/${symbol}`}>Learn More</Link>\n        </Button>\n      </CardActions>\n    </Card>\n    // <div className=\"stock-preview\">\n    //   <h3>{name}</h3>\n    //   <p>Symbol: {symbol}</p>\n    //   <p>{exchange}</p>\n    // </div>\n  );\n}\n\nexport default StockPreview;\n","import React, { useEffect, useState } from \"react\";\nimport { JSC } from \"jscharting-react\";\n\nimport \"./StockList.styles.scss\";\n\nimport StockPreview from \"../StockPreview/StockPreview.component\";\n\nfunction StockList({ filteredList }) {\n  return (\n    <div className=\"stock-list\">\n      {filteredList.map((stock) => (\n        <StockPreview\n          key={stock.symbol}\n          name={stock.name}\n          symbol={stock.symbol}\n          exchange={stock.exchange}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default StockList;\n","import React from \"react\";\nimport \"./searchbox.styles.scss\";\n\nconst SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n\nexport default SearchBox;\n","import React, { useEffect, useState } from \"react\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Plot from \"react-plotly.js\";\n\nimport \"./Stock.styles.scss\";\nimport { TextareaAutosize } from \"@material-ui/core\";\n\nconst columns = [\n  { id: \"name\", label: \"Name\", minWidth: 170 },\n  { id: \"information\", label: \"Information\", minWidth: 100 },\n];\n\nconst createData = (name, info) => {\n  return { name, info };\n};\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"50%\",\n    margin: \"0 auto\",\n  },\n  container: {\n    maxHeight: 440,\n    \"text-align\": \"center\",\n  },\n});\n\nconst Stock = ({ match }) => {\n  const [company, setCompany] = useState({});\n  const [chartXvalues, setchartXvalues] = useState([]);\n  const [chartYvalues, setchartYvalues] = useState([]);\n  const [page, setPage] = useState(0);\n  const classes = useStyles();\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  useEffect(() => {\n    fetchStock();\n  }, []);\n\n  useEffect(() => {\n    fetchCompanyInfo();\n  }, []);\n\n  const fetchCompanyInfo = () => {\n    const API_KEY = \"R0CL901JL3P0O6HH\";\n    let API_CALL = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${match.params.id}&apikey=${API_KEY}`;\n\n    fetch(API_CALL)\n      .then((response) => response.json())\n      .then((data) => setCompany(data));\n  };\n\n  const fetchStock = () => {\n    const API_KEY = \"R0CL901JL3P0O6HH\";\n    let API_CALL =\n      `https://www.alphavantage.co/query?` +\n      `function=TIME_SERIES_DAILY_ADJUSTED&symbol=${match.params.id}&interval=5min&outputsize=compact&` +\n      `apikey=${API_KEY}`;\n\n    let auxXValues = [];\n    let auxYValues = [];\n\n    fetch(API_CALL)\n      .then((response) => response.json())\n      .then((data) => {\n        for (let date in data[\"Time Series (Daily)\"]) {\n          auxXValues.push(date);\n          auxYValues.push(data[\"Time Series (Daily)\"][date][\"1. open\"]);\n        }\n\n        setchartXvalues(() => auxXValues);\n        setchartYvalues(() => auxYValues);\n      });\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  let rows = [];\n\n  for (let key in company) {\n    if (key !== \"Description\") rows.push(createData(key, company[key]));\n  }\n\n  return (\n    <div className=\"company-info\">\n      <div className=\"company-name\">{company.Name}</div>\n      {/* <div className=\"company-description\">{company.Description}</div> */}\n      <Paper className={classes.root}>\n        <TableContainer className={classes.container}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      tabIndex={-1}\n                      key={row.info}\n                    >\n                      {columns.map((column) => {\n                        console.log(column.id);\n                        const value = row[column.id];\n                        return (\n                          <TableCell key={column.id} align={column.align}>\n                            {column.id === \"name\" ? row.name : row.info}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 100]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <Plot\n        className=\"plot\"\n        data={[\n          {\n            x: chartXvalues,\n            y: chartYvalues,\n            type: \"scatter\",\n            mode: \"lines+markers\",\n            marker: { color: \"red\" },\n          },\n        ]}\n        layout={{\n          width: 920,\n          height: 640,\n          paper_bgcolor: \"#f7f8fb\",\n          plot_bgcolor: \"#f7f8fb\",\n          title: company.Name,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Stock;\n","import React, { useEffect, useState } from \"react\";\nimport { JSC } from \"jscharting-react\";\n\nimport StockList from \"../StockListComponent/StockList.component\";\nimport SearchBox from \"../SearchBox/SearchBox.component\";\nimport Stock from \"../StockComponents/Stock.component\";\n\nimport { Route, Switch } from \"react-router-dom\";\n\nimport \"./HomeComponent.scss\";\n\nfunction Home() {\n  const [stockList, setStockList] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  useEffect(() => {\n    fetchAllActiveStocks();\n  }, []);\n\n  const fetchAllActiveStocks = () => {\n    JSC.fetch(\"../../../listing_status.csv\")\n      .then((response) => response.text())\n      .then((data) => {\n        console.log(JSC.csv2Json(data));\n        setStockList(JSC.csv2Json(data));\n      });\n  };\n\n  const handleChange = (e) => {\n    return setSearchField(e.target.value);\n  };\n\n  const filteredList = stockList\n    .filter((stock) =>\n      stock.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    .slice(0, 8);\n\n  console.log(searchField);\n\n  return (\n    <div className=\"Home\">\n      <SearchBox\n        handleChange={handleChange}\n        placeholder=\"Search for Any Public Company\"\n      />\n      <StockList filteredList={filteredList} />\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { JSC } from \"jscharting-react\";\n\nimport StockList from \"./components/StockListComponent/StockList.component\";\nimport SearchBox from \"./components/SearchBox/SearchBox.component\";\nimport Stock from \"./components/StockComponents/Stock.component\";\nimport Home from \"./components/HomeComponent/HomeComponent\";\n\nimport \"./App.css\";\n\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\" exact component={Home}></Route>\n        <Route path=\"/company/:id\" component={Stock}></Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}